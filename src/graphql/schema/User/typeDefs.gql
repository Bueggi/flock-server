extend type Query {
  user(id: ID!): User
  allUsers: [User]!
}

# TODO refactor to take userid from auth token
extend type Mutation {
  updateUser(input: updateUserInput!): updateUser! # TODO put user id in separate argument e.g. updateUser(id: ID!, update: updateUserInput): User!
  createUser(input: createUserInput!): createUser!
}

type User {
  id: ID!
  email: String!
  avatarURL: String
  firstName: String
  lastName: String
  trips: [Trip]
}

input UserInput {
  email: String!
  avatarURL: String
  firstName: String
  lastName: String
}

input updateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  avatarURL: String
}

type updateUser {
  id: ID
  firstName: String
  lastName: String
  email: String
  avatarURL: String
}

input createUserInput {
  email: String!
  avatarURL: String
  firstName: String!
  lastName: String!
}

type createUser {
  email: String
  avatarURL: String
  firstName: String
  lastName: String
}
