extend type Query {
  trip(id: ID!): Trip
}

extend type Mutation {
  createTrip(trip: TripInput!): Trip!
  addParticipants(tripID: ID, participants: [String!]!): Trip!
  removeParticipants(tripID: ID, participants: [String!]!): Trip!
  addOrVoteForDestination(tripID: ID, destinations: [DestinationInput!]!): Trip!
  addOrVoteForTimeFrame(tripID: ID!, timeFrames: [TimeFrameInput!]!): Trip!
  addOrVoteForBudget(tripID: ID!, budget: BudgetInput!): Trip!
  removeVoteForDestination(tripID: ID!, suggestionID: ID!): Trip!
  removeVoteForTimeFrame(tripID: ID!, suggestionID: ID!): Trip!
  removeVoteForBudget(tripID: ID!, suggestionID: ID!): Trip!
  lockDestination(tripID: ID!, suggestionID: ID!): Trip!
  lockTimeFrame(tripID: ID!, suggestionID: ID!): Trip!
  lockBudget(tripID: ID!, suggestionID: ID!): Trip!
  unlockDestination(tripID: ID!): Trip!
  unlockTimeFrame(tripID: ID!): Trip!
  unlockBudget(tripID: ID!): Trip!
  toggleDictator(tripID: ID!, property: String!): Trip!
  addGeneralMessage(tripID: ID!, message: String!): Trip!
  addTimeFrameMessage(tripID: ID!, message: String!): Trip!
  addBudgetMessage(tripID: ID!, message: String!): Trip!
  addDestinationMessage(tripID: ID!, message: String!): Trip!
  toggleBudgetDictator(tripID: ID!): Trip!
  toggleDestinationDictator(tripID: ID!): Trip!
  toggleTimeFrameDictator(tripID: ID!): Trip!
  leaveTrip(tripID: ID!): [Trip]!
}

extend type Subscription {
  tripInfoChanged(tripID: ID): Trip!
  ownTripsChanged: [Trip]!
}

type Trip {
  id: ID!
  name: String!
  participants: [User!]!
  creator: User
  destination: DestinationObject
  budget: BudgetObject!
  timeFrame: TimeFrameObject
  createdAt: Date!
  messages: [MessageObject]
}

type MessageObject {
  createdAt: Date
  creator: User!
  message: String!
  type: MessageType!
}

enum MessageType {
  TRIP
  DESTINATION
  TIMEFRAME
  BUDGET
}

type DestinationObject {
  isDictated: Boolean
  isLocked: Boolean
  chosenSuggestion: Destination
  suggestions: [Destination]!
}

type Destination {
  id: ID!
  name: String!
  voters: [User!]!
  creator: User!
}

type BudgetObject {
  isDictated: Boolean
  isLocked: Boolean
  chosenSuggestion: Budget
  suggestions: [Budget]!
}

type Budget {
  id: ID!
  value: Int!
  voters: [User!]!
  creator: User!
}

type TimeFrameObject {
  isDictated: Boolean
  isLocked: Boolean
  chosenSuggestion: TimeFrame
  suggestions: [TimeFrame]!
}

type TimeFrame {
  id: ID!
  startDate: Date!
  endDate: Date!
  voters: [User!]!
  creator: User!
}

input TripInput {
  name: String!
  participants: [String]!
  destination: DestinationObjectInput
  budget: BudgetObjectInput
  timeFrame: TimeFrameObjectInput
}

input DestinationObjectInput {
  suggestions: [DestinationInput!]!
  isDictated: Boolean
}

input DestinationInput {
  name: String!
}

input BudgetObjectInput {
  suggestions: [BudgetInput]!
  isDictated: Boolean
}

input BudgetInput {
  value: Int!
}

input TimeFrameObjectInput {
  suggestions: [TimeFrameInput!]!
  isDictated: Boolean
}

input TimeFrameInput {
  startDate: Date!
  endDate: Date!
}
