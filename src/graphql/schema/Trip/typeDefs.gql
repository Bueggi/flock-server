extend type Query {
  trip(tripID: ID!): Trip
  allTrips: [Trip]!
}

extend type Mutation {
  updateTrip(input: updateTripInput!): updatedTrip!
  createTrip(input: createTripInput!): Trip
}

type Trip {
  id: ID!
  name: String!
  participants: [User]!
  destination: DestinationObject
  budget: BudgetObject!
  timeFrame: TimeFrameObject
}

type DestinationObject {
  chosenDestination: Destination
  suggestions: [Destination]!
  isDictated: Boolean
}

type Destination {
  key: ID!
  name: String!
  voters: [User]
  creator: User
}

type BudgetObject {
  chosenBudget: Budget
  suggestions: [Budget]!
  isDictated: Boolean
}

type TimeFrameObject {
  chosenTimeFrame: TimeFrame
  suggestions: [TimeFrame]!
  isDictated: Boolean
}

type TimeFrame {
  startDate: String
  endDate: String
  voters: [User]
  creator: User
}

type Budget {
  id: ID!
  value: Int!
  voters: [User]
  creator: User
}

input updateTripInput {
  id: ID!
  name: String
}

type updatedTrip {
  id: ID!
  name: String
}

input DestinationObjectInput {
  chosenDestination: DestinationInput
  suggestions: [DestinationInput]!
  isDictated: Boolean
}

input BudgetObjectInput {
  chosenBudget: BudgetInput
  suggestions: [BudgetInput]!
  isDictated: Boolean
}

input createTripInput {
  name: String!
  participants: [String]
  destination: DestinationObjectInput
  budget: BudgetObjectInput
  timeFrame: TimeFrameObjectInput
}

input DestinationInput {
  name: String
  voters: [ID]
  creator: ID

}

input BudgetInput {
  value: Int
  voters: [ID]
  creator: ID
}

input TimeFrameInput {
  startDate: String
  endDate: String
  voters: [ID]
  creator: ID
}

input UserInput {
  email: String
  avatarURL: String
  firstName: String
  lastName: String
}


input TimeFrameObjectInput {
  chosenTimeFrame: TimeFrameInput
  suggestions: [TimeFrameInput]!
  isDictated: Boolean
}
