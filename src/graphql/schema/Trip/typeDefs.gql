extend type Query {
  trip(id: ID!): Trip
  allTrips: [Trip]!
}

extend type Mutation {
  createTrip(trip: TripInput!, userID: ID): Trip!
}

extend type Subscription {
  tripAdded(tripCreator: ID!): Trip
}

type Trip {
  id: ID!
  name: String!
  participants: [User!]!
  creator: User
  destination: DestinationObject
  budget: BudgetObject!
  timeFrame: TimeFrameObject
}

type DestinationObject {
  chosenDestination: Destination
  suggestions: [Destination]!
  isDictated: Boolean
}

type Destination {
  key: ID!
  name: String!
  voters: [User!]!
  creator: User!
}

type BudgetObject {
  chosenBudget: Budget
  suggestions: [Budget]!
  isDictated: Boolean
}

type Budget {
  id: ID!
  value: Int!
  voters: [User!]!
  creator: User!
}

type TimeFrameObject {
  chosenTimeFrame: TimeFrame
  suggestions: [TimeFrame]!
  isDictated: Boolean
}

type TimeFrame {
  startDate: String
  endDate: String
  voters: [User!]!
  creator: User!
}

input TripInput {
  name: String!
  participants: [String]
  destination: DestinationObjectInput
  budget: BudgetObjectInput
  timeFrame: TimeFrameObjectInput
}

input DestinationObjectInput {
  suggestions: [String]
  isDictated: Boolean
}

input BudgetObjectInput {
  suggestions: [Int]
  isDictated: Boolean
}

input TimeFrameObjectInput {
  suggestions: [TimeFrameInput]
  isDictated: Boolean
}

input TimeFrameInput {
  startDate: String
  endDate: String
}
