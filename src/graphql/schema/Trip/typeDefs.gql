extend type Query {
  trip(id: ID!): Trip
  allTrips: [Trip]!
}

extend type Mutation {
  createTrip(trip: TripInput!, userID: ID): Trip!
  addParticipants(tripID: ID, participants: [String!]!): Trip!
  addOrVoteForDestination(tripID: ID, destinations: [DestinationInput!]!): Trip!
  addOrVoteForTimeFrame(tripID: ID!, timeFrames: [TimeFrameInput!]!): Trip!
  addOrVoteForBudget(tripID: ID!, budget: BudgetInput!): Trip!
  removeVoteForDestination(tripID: ID!, destinationID: ID!): Trip!
  removeVoteForTimeFrame(tripID: ID!, timeFrameID: ID!): Trip!
  removeVoteForBudget(tripID: ID!, budgetID: ID!): Trip!
}

extend type Subscription {
  tripInfoChanged: Trip
}

type Trip {
  id: ID!
  name: String!
  participants: [User!]!
  creator: User
  destination: DestinationObject
  budget: BudgetObject!
  timeFrame: TimeFrameObject
  createdAt: Date!
}

type DestinationObject {
  chosenDestination: Destination
  suggestions: [Destination]!
  isDictated: Boolean
}

type Destination {
  id: ID!
  name: String!
  voters: [User!]!
  creator: User!
}

type BudgetObject {
  chosenBudget: Budget
  suggestions: [Budget]!
  isDictated: Boolean
}

type Budget {
  id: ID!
  value: Int!
  voters: [User!]!
  creator: User!
}

type TimeFrameObject {
  chosenTimeFrame: TimeFrame
  suggestions: [TimeFrame]!
  isDictated: Boolean
}

type TimeFrame {
  id: ID!
  startDate: Date!
  endDate: Date!
  voters: [User!]!
  creator: User!
}

input TripInput {
  name: String!
  participants: [String]!
  destination: DestinationObjectInput
  budget: BudgetObjectInput
  timeFrame: TimeFrameObjectInput
}

input DestinationObjectInput {
  suggestions: [DestinationInput!]!
  isDictated: Boolean
}

input DestinationInput {
  name: String!
}

input BudgetObjectInput {
  suggestions: [BudgetInput!]!
  isDictated: Boolean
}

input BudgetInput {
  value: Int!
}

input TimeFrameObjectInput {
  suggestions: [TimeFrameInput!]!
  isDictated: Boolean
}

input TimeFrameInput {
  startDate: Date!
  endDate: Date!
}
